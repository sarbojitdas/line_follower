///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'b2':  [[ -2.29324131],
       [-11.50676821],
       [-11.42249045],
       [ -1.39576606]])

'b1':  [[1.2991589 ],
       [1.69615248],
       [0.97645989],
       [0.10798115]]),

'W1':  [[ 2.58967959,  2.5943453 ,  2.61530132,  0.14445398, -2.82910134,-2.58394168, -2.59563151, -2.70833323],
       [ 2.83314688,  2.83641113,  2.75602231, -0.37191587, -2.72730126,-2.85219364, -2.83777061, -2.94400048],
       [ 2.97068376,  2.84007961,  2.83782134,  2.70136901, -2.19495852,-2.83884231, -2.83729924, -2.84653648],
       [ 2.78890652,  2.66494224,  2.6664648 ,  2.39940877, -1.08102098,-2.67511859, -2.66831527, -2.65699553]]),

'W2':  [[-2.38358508, -0.80868446, -7.03840557, -5.29165846],
       [-5.25350927, -6.66356558,  6.04655497,  5.77870231],
       [ 0.40235245,  0.5979797 , -0.50614954, -0.52809925],
       [ 6.27147864,  6.08145003,  2.08110773, -0.08477398]])

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def forward_propagation(X, parameters):
               np.random.seed(2)
               W1 = parameters["W1"]
               b1 = parameters["b1"]
               W2 = parameters["W2"]
               b2 = parameters["b2"]

               Z1 = np.dot(W1, X) + b1
               A1 = np.tanh(Z1)
               Z2 = np.dot(W2, A1) + b2
               A2 = sigmoid(Z2)

               cache = {"Z1": Z1,"A1": A1,"Z2": Z2,"A2": A2}
               return A2, cache

def predict(parameters, P):

           A2, cache = forward_propagation(P, parameters)
           predictions = A2
           return predictions

P=[1,1,1,1,0,0,0,0] //Sensor Input
predictions = predict(parameters, P)
all=np.sum(predictions,axis=1)
all=all/np.max(all)
print (all)


//Decide

//Decision matrix = left_spin,front,stop,right_spin
